buildscript {
    ext {
    }
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
        jcenter()
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.grails.plugins:hibernate5:${gormVersion - ".RELEASE"}"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.15.1"
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:1.5.9.2"
    }
}

version "1.0235"
group "services3"

apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "war"
apply plugin: "org.grails.grails-web"
apply plugin: "asset-pipeline"
apply plugin: "org.grails.grails-gsp"
apply plugin: 'org.asciidoctor.convert'

war.archiveName("nsl#services##${rootProject.version}.war")

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "https://dl.bintray.com/nerderg/plugins" }
    maven {
        url "https://oss.jfrog.org/artifactory/oss-snapshot-local"
    }
    maven { url "https://dl.bintray.com/bio-org-au/plugins" }
}

ext['tomcat.version'] = '7.0.59'

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:events"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:5.1.16.Final"
    compile "org.grails.plugins:gsp"

    // application plugins
    compile "au.org.biodiversity.grails.plugins:nsl-domain-plugin-g3:3.1.21-SNAPSHOT"
    compile 'com.nerderg.plugins:SimpleSuggestions3:1.1'
    compile "org.grails.plugins:grails-shiro:3.3"
    compile 'org.grails.plugins:quartz:2.0.13'
    runtime 'org.grails.plugins:async:4.0.0'
    compile 'org.grails:grails-datastore-rest-client'

    //other dependencies
    compile 'net.htmlparser.jericho:jericho-html:3.2'
    compile "io.jsonwebtoken:jjwt:0.7.0"
    compile 'joda-time:joda-time:2.9.9'

    console "org.grails:grails-console"
    profile "org.grails.profiles:web"
    runtime "org.glassfish.web:el-impl:2.1.2-b03"
    runtime "com.h2database:h2"
    runtime "org.apache.tomcat:tomcat-jdbc"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:2.15.1"


    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.grails.plugins:geb"
    testCompile "org.grails:grails-web-testing-support"
    testCompile "org.grails.plugins:geb:1.1.2"
    testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
    testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"
    testRuntime "org.seleniumhq.selenium:selenium-chrome-driver:2.47.1"
}

bootRun {
    //environment "nsl_services_config", "${projectDir.absolutePath}/etc/nsl/services-config-g3.groovy"
    jvmArgs(['-Dspring.output.ansi.enabled=always', '-Xmx2G', '-Xms2G'])
    addResources = true
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

tasks.withType(Test) {
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
    systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
    systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
}

assets {
    minifyJs = true
    minifyCss = true
}

asciidoctor {
    sourceDir = file("docs")
    sources {
        include "index.adoc"
    }

    resources {
        from("$sourceDir/resources/images")
        into './resources/images'
    }

    attributes 'source-highlighter': 'coderay',
            toc: '',
            idprefix: '',
            idseparator: '-'

    outputDir = file("build/docs")
}

task dockerPublish() {
    dependsOn(assemble)
    doFirst {
        exec {
            workingDir(projectDir)
            ignoreExitValue(true)
            commandLine '/usr/bin/docker', 'image', 'rm', 'nsl-services'
        }
    }
    doLast {
        exec {
            workingDir(projectDir)
            commandLine '/usr/bin/docker', 'build', '--tag=nsl-services', '.'
        }
        exec {
            workingDir(projectDir)
            commandLine "/usr/bin/docker", "tag", "nsl-services", "${dockerRepo}/nsl-services:${version}-SNAP"
        }
        exec {
            workingDir(projectDir)
            commandLine "/usr/bin/docker", "push", "${dockerRepo}/nsl-services:${version}-SNAP"
        }
    }
}
